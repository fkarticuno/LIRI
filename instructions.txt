* [Node-Spotify-API](https://www.npmjs.com/package/node-spotify-api) 


	search: function({ type: 'artist OR album OR track', query: 'My search query', limit: 20 }, callback);
	===================== OR ========================
	var Spotify = require('node-spotify-api');
	var spotify = new Spotify({
  		id: <your spotify client id>,
  		secret: <your spotify client secret>
	});
	spotify.search({ type: 'track', query: 'All the Small Things' }, function(err, data) {
  		if (err) {
    		return console.log('Error occurred: ' + err);
  	}
	console.log(data); 
	});

* [Axios](https://www.npmjs.com/package/axios)
	CDN
	<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
	
	??? Maybe ???
	axios({
  		method: 'get',
  		url: 'http://www.omdbapi.com',
  		responseType: 'stream'
	})
  	.then(function (response) {
    		response.data.pipe(fs.createWriteStream('ada_lovelace.jpg')) //wut?
  	}); 

* [OMDB API](http://www.omdbapi.com) [works]

	// Grab or assemble the movie name and store it in a variable called "movieName"
	var movieName=process.argv[2];
	for (var i=3; i<process.argv.length; i++){
		movieName += '+'
		movieName += process.argv[i];
		console.log(movieName)
	}
	console.log(movieName)
	var axios = require('axios');
	// Then run a request with axios to the OMDB API with the movie specified
	var queryUrl = "http://www.omdbapi.com/?t=" + movieName + "&y=&plot=short&apikey=trilogy";
	// This line is just to help us debug against the actual URL.
	console.log(queryUrl);
	// Then create a request with axios to the queryUrl
	axios.get(queryUrl).then(
	function(response) {
		//console.log(response);
	// If the request with axios is successful
		console.log("The movie's rating is: " + response.data.imdbRating);
	// Then log the Release Year for the movie
		console.log("The Release year is:",response.data.Released)
	});

* You'll use Axios to grab data from the [OMDB API](http://www.omdbapi.com) and the [Bands In Town API](http://www.artists.bandsintown.com/ bandsintown-api) 

* [Moment](https://www.npmjs.com/package/moment) 
* [DotEnv](https://www.npmjs.com/package/dotenv) 

## Submission Guide

Create and use a standard GitHub repository. As this is a CLI App, it cannot be deployed to GitHub pages or Heroku. This time you'll need to include screenshots, a GIF, and/or a video showing us that you have the app working with no bugs. You can include these screenshots/GIFs or a link to a video in a `README.md` file.

In order to meet the Employer Competitive standards and be ready to show your application to employers, the `README.md` file should meet the following criteria:

1. Clearly state the problem the app is trying to solve (i.e. what is it doing and why)
2. Give a high-level overview of how the app is organized
3. Give start-to-finish instructions on how to run the app
4. Include screenshots, gifs or videos of the app functioning
5. Contain a link to a deployed version of the app
6. Clearly list the technologies used in the app
7. State your role in the app development

Because screenshots (and well-written READMEs) are extremely important in the context of GitHub, this will be part of the grading in this assignment.

If you haven't written a markdown file yet, [click here for a rundown](https://guides.github.com/features/mastering-markdown/), or just take a look at the raw file of these instructions.